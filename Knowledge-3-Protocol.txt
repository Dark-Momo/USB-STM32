1. Differential States
Full and High Speed 	: 1 when D+ high > D- low, 0 when D+ low < D- high;
Low Speed               	: 1 when D+ < D-, 0 when D+ > D-;

Bus lines are by default pulled to low by 2 resistors(15K) at host side;
(1) Low Speed also pulls D- to 3.3V at device side using 1.5K;
(2) High/Full Speed also pulls D+ to 3.3V at device side using 1.5K;

2. USB Host Controller
- USB 1.x has 2 versions of controllers: UHCI, and OHCI.
  Universal Host Controller Interface (UHCI) needs software to do more on bus management;
  Open Host Controller Interface (OHCI) needs hareware to do more on bus management;

- USB 2.0 has Extended Host Controller Interface (EHCI).
--------------------------------------------------------------------------------------------------
For USB drivers till USB 2.0, driver needs to support all of these three controllers.
--------------------------------------------------------------------------------------------------

- USB 3.x has Extensible Host Controller Interface (xHCI), which replaces old controllers.

3. Bus State
- SE0: Both lines(D+ and D-) are low;
- Detached: SE0;
- Idle: Differential 1;
- J: Differential 1;
- K: Opposite to J state;

- Reset(Host asks device to reset itself): SE0 > 10ms;
- Suspend: When in Idle > 3ms; to save power;
- Resume(from Suspend): K > 20ms then a EOP;
- Sync or Start of Packet(SOP): KJKJKJKK;
- END Of Packet(EOP): SE0 SE0 J;

4. Bit stuffing and NRZI (Non-Return-to-Zero Inverter)
Insert non-information bits into data.
In USB HS/FS, insert zero after six consecutive ones to ensure state transition so that clock can sync.

NRZI based on bit stuff is well explained in [Video - 20].

5. Frames and SOF(Start Of Frame)
[SOF]==========Data==========[SOF]==========Data==========[SOF]==========Data==========
        |--------1ms(FS) / 125uS(HS)---------|

6. Endpoints
An endpoint is a logical entity that can be seen as data sender or receiver.
It only describes USB devices, not host. A USB device may contain multiple endpoints, like ports in TCP protocol.

The data direction of endpoint is considered from host's perspective. 
For example, if the data will flow out of the endpoint and get into the host, it is a IN endpoint, and the data is IN data.
IN: from device to host;
OUT: from host to device;
An device can have up to 16 IN and 16 OUT endpoints. A sensor can use IN1 to send data to host and use OUT3 to receive
data from host. A device has INx doesn't mean it also has OUTx. 

Endpoint 0 is an exception.
- Every device must support the endpoint 0 IN and OUT because it is config endpoint;

----------------------------------------------------------------------------------------------------------------------------

[Packets and Transactions]

1. Data is transmitted in the form of packets in USB. And the bytes are transmitted in Least-Significant Bits first.
So if you have data byte 0x4F (0b01001111), on bus, it is like below:
1-1-1-1-0-0-1-0 
Again, this LSB first is for a byte, not between several bytes.

2. SOP(Start of Packet) and SOF(Start of Frame)
- Sync or Start of Packet(SOP) is a field inside a packet, which is usually KJKJKJKK;
- Start of Frame(SOF) is a packet, which contains SOP as one of its field.

3. Packet Types
Start of Frame Packet: SOP - PID - Frame No. - CRC5 - EOP
Token Packet         : SOP - PID - ADDR - ENDP - CRC5 - EOP
Data Packet          : SOP - PID - DATA -------- CRC16 - EOP
Handshake packet     : SOP - PID - EOP

SOF is a type of its own and it is usually used as sync on bus.
The latter 3 types are the most frequently used packets in USB.

ADDR is used to indicate which device the host is communicating with;
ENDP : Endpoint number. To which or from which endpoint.

4. USB transactions consists of 2 or 3 sequences of below packets:
(1) Token Packets;
(2) Data Packets;
(3) Handshake Packets (Isochoronous transaction doesn't need handshake);

Token packet is always the 1st packet in a transaction, telling who is sending and who should receive the following data packets;
Handshake packets follows data packets, telling whether data packet is received or not;

Packet Identifier (PID) indicates what the following data packet is for. Token, Data, and Handshake packets have their own PID group.

- Token packet
It has 4 types of PIDs: 
(1) IN : Host will read data from device;
(2) OUT : Host will send data to device;
(3) SETUP : Host will send SETUP data to device. setup token works only with control endpoints in the device, which is endpoint 0.
(4) SOF

- Data Packet
It has 4 types of PIDs: DATA0/DATA1/DATA2/MDATA. DATA2 and MDATA are only available in High Speed Mode;
(1) DATA0 and DATA1 are for the same purpose of data transmission. They are used alternatively just for error checking. Data payload can be 0-length.

- Handshake Packet
It has 4 types of PIDs: ACK/NAK/STALL/NYET. NYET is  only available in High Speed Mode.
Handshake packet indicates the end of a transaction. 
(1) ACK : Receiver correctly receives the packet;
(2) NAK : Receiver can't receive, ot the sender can send the data now;
(3) STALL : Error happened, device put its endpoint on hold; Received SETUP is not supported;

5. USB is host driven
USB transactions are triggered by the host.
The host starts a transaction by sending Token packets. Only the host can send Token packets. USB devices can use a Handshake packet to respond. 








