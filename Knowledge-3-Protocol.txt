1. Differential States
Full and High Speed 	: 1 when D+ high > D- low, 0 when D+ low < D- high;
Low Speed               	: 1 when D+ < D-, 0 when D+ > D-;

Bus lines are by default pulled to low by 2 resistors(15K) at host side;
(1) Low Speed also pulls D- to 3.3V at device side using 1.5K;
(2) High/Full Speed also pulls D+ to 3.3V at device side using 1.5K;

2. USB Host Controller
- USB 1.x has 2 versions of controllers: UHCI, and OHCI.
  Universal Host Controller Interface (UHCI) needs software to do more on bus management;
  Open Host Controller Interface (OHCI) needs hareware to do more on bus management;

- USB 2.0 has Extended Host Controller Interface (EHCI).
--------------------------------------------------------------------------------------------------
For USB drivers till USB 2.0, driver needs to support all of these three controllers.
--------------------------------------------------------------------------------------------------

- USB 3.x has Extensible Host Controller Interface (xHCI), which replaces old controllers.

3. Bus State
- SE0: Both lines(D+ and D-) are low;
- Detached: SE0;
- Idle: Differential 1;
- J: Differential 1;
- K: Opposite to J state;

- Reset(Host asks device to reset itself): SE0 > 10ms;
- Suspend: When in Idle > 3ms; to save power;
- Resume(from Suspend): K > 20ms then a EOP;
- Sync or Start of Packet(SOP): KJKJKJKK;
- END Of Packet(EOP): SE0 SE0 J;

4. Bit stuffing and NRZI (Non-Return-to-Zero Inverter)
Insert non-information bits into data.
In USB HS/FS, insert zero after six consecutive ones to ensure state transition so that clock can sync.

NRZI based on bit stuff is well explained in [Video - 20].

5. Frames and SOF(Start Of Frame)
[SOF]==========Data==========[SOF]==========Data==========[SOF]==========Data==========
        |--------1ms(FS) / 125uS(HS)---------|

6. Endpoints
An endpoint is a logical entity that can be seen as data sender or receiver.
It only describes USB devices, not host. A USB device may contain multiple endpoints, like ports in TCP protocol.

The data direction of endpoint is considered from host's perspective. 
For example, if the data will flow out of the endpoint and get into the host, it is a IN endpoint, and the data is IN data.
IN: from device to host;
OUT: from host to device;
An device can have up to 16 IN and 16 OUT endpoints. A sensor can use IN1 to send data to host and use OUT3 to receive
data from host. A device has INx doesn't mean it also has OUTx. 

Endpoint 0 is an exception.
- Every device must support the endpoint 0 IN and OUT because it is config endpoint;









