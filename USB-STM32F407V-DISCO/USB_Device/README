******************************************************************************************************************************************
[Attention - 1]
******************************************************************************************************************************************
When this project is created:
1. It is created using board selector, not from chip type;
2. In "Project Setup" step, we select "Empty" at "Targeted Project Type" step.
   So when the project is created, all the folders are empty.
3. We then copied below folders from download STM32F4 CMSIS package
   STM32Cube_FW_F4_V1.28.0\Drivers\CMSIS\Device and
   STM32Cube_FW_F4_V1.28.0\Drivers\CMSIS\Include
   into Inc folder in our project. Some useless folders are deleted, such as:
   (1) Inc/CMSIS/Device/ST/STM32F4xx/Include only has stm32f407xx.h, stm32f4xx.h and system_stm32f4xx.h;
   (2) Inc/CMSIS/Include keeps as original;
4. Add above 2 Include paths to Project -> Properties -> C/C++ General -> Path and Symbols -> Include;
5. In Project -> Properties -> C/C++ General -> Path and Symbols -> Symbols, add "STM32F407xx".
   This is a macro needed by stm32f4xx.h.
 
Now compile the main.c, you should get it pass.
6. The course also deleted syscalls.c and sysmem.c under Src folder of the project. We don't do that yet.

******************************************************************************************************************************************
[Attention - 2]
******************************************************************************************************************************************
Debugging USB can't use breakpoint because it will bring long pause on timing, making host think the device
has timed out, so it will keep rebooting the device.
 
We use logging for USB debug, which means we are going to send message from our device to our host.
SWO (Single Wire Output) is a way to send message from MCU to ST-Linker debugger. It is available in M3, M4, M7, not in M0.
 
To implement SWO, you need to define _write(), which is by default a weak imlementation in syscalls.c. 
printf() uses _write(). By default, printf() will print to standard output, while for embedded device, we have no standard
output. So we need to re-define _write() to change the behavior of printf() to SWO.
 
We created folder /Helpers under Inc and Src, and copied the files downloaded from course video there.
 
At this moment, if we add a line in main.c that
----------------------------------------------- 
log_info("Program entry point");
------------------------------------------------
We will get compilation error:
--------------------------------------------------------------------------------------------------------------------------------------------
C:/Users/laoji/Desktop/USB-STM32/USB-STM32F407V-DISCO/USB_Device/Debug/../Src/Helpers/logger.c:41: undefined reference to `system_log_level'
--------------------------------------------------------------------------------------------------------------------------------------------
The reason is, in logger.h, we have:
---------------------------------
extern LogLevel system_log_level;
---------------------------------
This is a declaration, not definition. We didn't provide what "system_log_level" is for default. But in logger.c, it needs its value.
So we need this "system_log_level" to be defined somewhere, before logger.c really uses it.

Since system_log_level is a global thing, we need to define it somewhere that can be seen by the whole project.
- Define in main.c can only be seen by main.c;

We actually have a function in the startup assembly file called SystemInit(), which is declared in system_stm32f4xx.h.
SystemInit() is called in initialization stage.
(1) Under Src folder, create a source file named "systemInit.c";
(2) Add definition to it. Check current file content to see what it is.

Then we compiles correctly!

******************************************************************************************************************************************
[Attention - 3]
******************************************************************************************************************************************
How to run SWO debugger?
1. Click the Green Spider icon, which is the 'Debug';
2. Currently we only enable the SWV option in Debugger tab. 
   Here we have core clock to 16MHz. We will change this value later to our USB clock cycle;
3. Click "Debug";
4. Click "Switch";
5. Window -> Show View -> SWV -> SWV ITM Data Console;
   (1) Config trace -> Select Enable Port 0 -> OK;
   (2) Start Trace;
6. Click Resume/F8;
We shall see the "[INFO] Program entry point" from main.c.








